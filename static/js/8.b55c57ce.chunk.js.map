{"version":3,"sources":["redux/shop/shop.actions.js","Pages/shop/shop.component.jsx","redux/shop/shop.selector.js"],"names":["fetchCollectionsStartAsync","dispatch","collectionRef","firestore","collection","type","shopActionTypes","FETCH_COLLECTIONS_START","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsSuccess","catch","error","ErrorMessage","message","CollectionsOverview","lazy","CollectionPage","ShopPage","unsubscribeFromSnapshot","this","props","className","collectionIsLoaded","Fragment","fallback","Spinner","exact","path","match","component","React","Component","connect","state","shopIsFetching","selectShopIsFetching","selectIsCollectionIsLoaded","selectShop","shop","selectShopCollections","createSelector","collections","isFetching","selectCollection","collectionId","selectCollectionPreview","Object","keys","map","key"],"mappings":"wMAmBaA,EAA6B,WACxC,OAAO,SAAAC,GACL,IAAMC,EAAgBC,IAAUC,WAAW,eAC3CH,EAhBwC,CAC1CI,KAAMC,IAAgBC,0BAgBpBL,EACGM,MACAC,MAAK,SAAAC,GACJ,IAAMC,EAAiBC,YAAgCF,GACvDT,EAjB+B,SAAAU,GAAc,MAAK,CACxDN,KAAMC,IAAgBO,0BACtBC,QAASH,GAeMI,CAAwBJ,OAElCK,OAAM,SAAAC,GAAK,OAAIhB,GAdiBiB,EAcgBD,EAAME,QAdL,CACtDd,KAAMC,IAAgBO,0BACtBC,QAASI,KAF4B,IAAAA,O,uCCDjCE,EAAsBC,gBAAK,kBAC/B,iCAEIC,EAAiBD,gBAAK,kBAC1B,iCAGIE,E,4MACJC,wBAA0B,K,uDAC1B,WACEC,KAAKC,MAAM1B,+B,oBAGb,WACE,OACE,qBAAK2B,UAAU,YAAf,SACIF,KAAKC,MAAME,mBAGX,cAAC,IAAMC,SAAP,UACE,eAAC,WAAD,CAAUC,SAAU,cAACC,EAAA,EAAD,IAApB,UACE,cAAC,IAAD,CACEC,OAAK,EACLC,KAAI,UAAKR,KAAKC,MAAMQ,MAAMD,MAC1BE,UAAWf,IAEb,cAAC,IAAD,CACEa,KAAI,UAAKR,KAAKC,MAAMQ,MAAMD,KAAtB,kBACJE,UAAWb,SAXjB,cAACS,EAAA,EAAD,U,GAVaK,IAAMC,WAwCdC,uBATS,SAAAC,GAAK,MAAK,CAChCC,eAAgBC,YAAqBF,GACrCX,mBAAoBc,YAA2BH,OAGtB,SAAAtC,GAAQ,MAAK,CACtCD,2BAA4B,kBAAMC,EAASD,SAG9BsC,CAA6Cf,I,gCC7D5D,oJAEMoB,EAAa,SAAAJ,GAAK,OAAIA,EAAMK,MAErBC,EAAwBC,YACnC,CAACH,IACD,SAAAC,GAAI,OAAIA,EAAKG,eAEFN,EAAuBK,YAClC,CAACH,IACD,SAAAC,GAAI,OAAIA,EAAKI,cAGFC,EAAmB,SAAAC,GAAY,OAC1CJ,YAAe,CAACD,IAAwB,SAAAE,GAAW,OACjDA,EAAcA,EAAYG,GAAgB,SAGjCR,EAA6BI,YACxC,CAACH,IACD,SAAAC,GAAI,QAAMA,EAAKG,eAGJI,EAA0BL,YACrC,CAACD,IACD,SAAAE,GAAW,OACTA,EAAcK,OAAOC,KAAKN,GAAaO,KAAI,SAAAC,GAAG,OAAIR,EAAYQ,MAAQ,O","file":"static/js/8.b55c57ce.chunk.js","sourcesContent":["import { shopActionTypes } from './shop.types.js';\r\nimport {\r\n  firestore,\r\n  convertCollectionsSnapshotToMap,\r\n} from '../../firebase/firebase.utils';\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n  type: shopActionTypes.FETCH_COLLECTIONS_START,\r\n});\r\n\r\nexport const fetchCollectionsSuccess = collectionsMap => ({\r\n  type: shopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n  payload: collectionsMap,\r\n});\r\n\r\nexport const fetchCollectionsFailure = ErrorMessage => ({\r\n  type: shopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n  payload: ErrorMessage,\r\n});\r\nexport const fetchCollectionsStartAsync = () => {\r\n  return dispatch => {\r\n    const collectionRef = firestore.collection('collections');\r\n    dispatch(fetchCollectionsStart());\r\n    collectionRef\r\n      .get()\r\n      .then(snapshot => {\r\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n        dispatch(fetchCollectionsSuccess(collectionsMap));\r\n      })\r\n      .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n  };\r\n};\r\n","import React, { lazy, Suspense } from 'react';\r\nimport { Route } from 'react-router-dom';\r\n// import CollectionPage from '../collection/CollectionPage.component';\r\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions.js';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  selectShopIsFetching,\r\n  selectIsCollectionIsLoaded,\r\n} from '../../redux/shop/shop.selector';\r\nimport './shop.styles.scss';\r\n\r\n// import CollectionsOverview from '../../Components/collection-overview/CollectionsOverview.component';\r\nimport Spinner from '../../Components/Spinner/Spinner';\r\n\r\nconst CollectionsOverview = lazy(() =>\r\n  import('../../Components/collection-overview/CollectionsOverview.component')\r\n);\r\nconst CollectionPage = lazy(() =>\r\n  import('../collection/CollectionPage.component')\r\n);\r\n\r\nclass ShopPage extends React.Component {\r\n  unsubscribeFromSnapshot = null;\r\n  componentDidMount() {\r\n    this.props.fetchCollectionsStartAsync();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='shop-page'>\r\n        {!this.props.collectionIsLoaded ? (\r\n          <Spinner></Spinner>\r\n        ) : (\r\n          <React.Fragment>\r\n            <Suspense fallback={<Spinner></Spinner>}>\r\n              <Route\r\n                exact\r\n                path={`${this.props.match.path}`}\r\n                component={CollectionsOverview}\r\n              />\r\n              <Route\r\n                path={`${this.props.match.path}/:collectionId`}\r\n                component={CollectionPage}\r\n              />\r\n            </Suspense>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  shopIsFetching: selectShopIsFetching(state),\r\n  collectionIsLoaded: selectIsCollectionIsLoaded(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\r\n","import { createSelector } from 'reselect';\r\n\r\nconst selectShop = state => state.shop;\r\n\r\nexport const selectShopCollections = createSelector(\r\n  [selectShop],\r\n  shop => shop.collections\r\n);\r\nexport const selectShopIsFetching = createSelector(\r\n  [selectShop],\r\n  shop => shop.isFetching\r\n);\r\n\r\nexport const selectCollection = collectionId =>\r\n  createSelector([selectShopCollections], collections =>\r\n    collections ? collections[collectionId] : null\r\n  );\r\n\r\nexport const selectIsCollectionIsLoaded = createSelector(\r\n  [selectShop],\r\n  shop => !!shop.collections\r\n);\r\n\r\nexport const selectCollectionPreview = createSelector(\r\n  [selectShopCollections],\r\n  collections =>\r\n    collections ? Object.keys(collections).map(key => collections[key]) : []\r\n);\r\n"],"sourceRoot":""}